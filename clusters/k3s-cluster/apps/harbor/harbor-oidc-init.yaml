apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-oidc-init
  namespace: harbor
  labels:
    app.kubernetes.io/name: harbor-oidc-init
    app.kubernetes.io/component: configuration
data:
  init-script.sh: |
    #!/bin/bash
    set -e
    
    echo "Starting Harbor OIDC initialization..."
    
    # Wait for Harbor to be ready
    echo "Waiting for Harbor to be ready..."
    until curl -k -s https://harbor.theedgeworks.ai/api/v2.0/systeminfo > /dev/null; do
      echo "Harbor not ready yet, waiting..."
      sleep 10
    done
    
    echo "Harbor is ready, configuring OIDC..."
    
    # Get admin credentials from secret
    ADMIN_PASSWORD=$(cat /etc/harbor/admin-password)
    
    # Get OIDC credentials from secret
    CLIENT_ID=$(cat /etc/harbor/oidc/client-id)
    CLIENT_SECRET=$(cat /etc/harbor/oidc/client-secret)
    
    # Configure OIDC authentication
    echo "Configuring OIDC authentication..."
    curl -k -X PUT \
      -H "Content-Type: application/json" \
      -u "admin:${ADMIN_PASSWORD}" \
      -d '{
        "auth_mode": "oidc_auth",
        "oidc_name": "Google Workspace",
        "oidc_endpoint": "https://accounts.google.com",
        "oidc_client_id": "'${CLIENT_ID}'",
        "oidc_client_secret": "'${CLIENT_SECRET}'",
        "oidc_scope": "openid,profile,email",
        "oidc_verify_cert": true,
        "oidc_auto_onboard": true,
        "oidc_extra_redirect_parms": "scope=openid,profile,email&hd=theedgeworks.ai"
      }' \
      https://harbor.theedgeworks.ai/api/v2.0/configurations
    
    echo "OIDC configuration completed successfully!"
    
    # Verify configuration
    echo "Verifying OIDC configuration..."
    curl -k -s -u "admin:${ADMIN_PASSWORD}" \
      https://harbor.theedgeworks.ai/api/v2.0/configurations | \
      jq '.auth_mode, .oidc_name, .oidc_endpoint'
    
    echo "Harbor OIDC initialization completed!"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-oidc-init
  namespace: harbor
  labels:
    app.kubernetes.io/name: harbor-oidc-init
    app.kubernetes.io/component: configuration
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: harbor-oidc-init
        image: alpine:latest
        command:
        - /bin/sh
        - /scripts/init-script.sh
        volumeMounts:
        - name: init-script
          mountPath: /scripts
        - name: admin-password
          mountPath: /etc/harbor/admin-password
          subPath: password
          readOnly: true
        - name: oidc-credentials
          mountPath: /etc/harbor/oidc
          readOnly: true
        env:
        - name: CURL_CA_BUNDLE
          value: ""
      volumes:
      - name: init-script
        configMap:
          name: harbor-oidc-init
          defaultMode: 0755
      - name: admin-password
        secret:
          secretName: harbor-harbor-core
      - name: oidc-credentials
        secret:
          secretName: harbor-google-workspace-oidc
