apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "13"
      meta.helm.sh/release-name: harbor
      meta.helm.sh/release-namespace: harbor
    labels:
      app: harbor
      app.kubernetes.io/component: core
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/part-of: harbor
      app.kubernetes.io/version: 2.13.1
      chart: harbor
      component: core
      heritage: Helm
      release: harbor
    name: harbor-core
    namespace: harbor
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: harbor
        component: core
        release: harbor
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/configmap: 52d3330b1efa4af1468fff9de94cda3595f315f8e3085ea424d9373648440761
          checksum/secret: b24c422997286e11e81cd530abc5135ee781f7398bd286ba9f95da6c496fd7ce
          checksum/secret-jobservice: 4a22b52c5ecae8120d518f545a7feac01bfba494fd3b3638da705d134b2ae766
          kubectl.kubernetes.io/restartedAt: "2025-06-06T12:00:52+02:00"
        labels:
          app: harbor
          app.kubernetes.io/component: core
          app.kubernetes.io/instance: harbor
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: harbor
          app.kubernetes.io/part-of: harbor
          app.kubernetes.io/version: 2.13.1
          chart: harbor
          component: core
          heritage: Helm
          release: harbor
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                key: secret
                name: harbor-core
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                key: JOBSERVICE_SECRET
                name: harbor-jobservice
          envFrom:
          - configMapRef:
              name: harbor-core
          - secretRef:
              name: harbor-core
          image: goharbor/harbor-core:v2.13.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: core
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 360
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/core/app.conf
            name: config
            subPath: app.conf
          - mountPath: /etc/core/key
            name: secret-key
            subPath: key
          - mountPath: /etc/core/private_key.pem
            name: token-service-private-key
            subPath: tls.key
          - mountPath: /etc/core/ca
            name: ca-download
          - mountPath: /etc/core/token
            name: psc
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10000
          runAsUser: 10000
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: app.conf
              path: app.conf
            name: harbor-core
          name: config
        - name: secret-key
          secret:
            defaultMode: 420
            items:
            - key: secretKey
              path: key
            secretName: harbor-core
        - name: token-service-private-key
          secret:
            defaultMode: 420
            secretName: harbor-core
        - emptyDir: {}
          name: ca-download
        - emptyDir: {}
          name: psc
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-06-06T10:01:13Z"
      lastUpdateTime: "2025-06-06T10:01:13Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      type: Available
    - lastTransitionTime: "2025-06-06T10:18:33Z"
      lastUpdateTime: "2025-06-06T10:18:33Z"
      message: ReplicaSet "harbor-core-777849c754" has timed out progressing.
      reason: ProgressDeadlineExceeded
      type: Progressing
    observedGeneration: 15
    readyReplicas: 1
    replicas: 2
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "9"
      meta.helm.sh/release-name: harbor
      meta.helm.sh/release-namespace: harbor
    labels:
      app: harbor
      app.kubernetes.io/component: jobservice
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/part-of: harbor
      app.kubernetes.io/version: 2.13.1
      chart: harbor
      component: jobservice
      heritage: Helm
      release: harbor
    name: harbor-jobservice
    namespace: harbor
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: harbor
        component: jobservice
        release: harbor
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/configmap: 59c100d3d9cddebf148ad7e54a2829df5dbaede495e37cafae7c23a4dc870ee3
          checksum/configmap-env: 22a859dd24a3365ff73936d254f80f36b9a5343d3114e47b7661b22518afbc8c
          checksum/secret: 4a22b52c5ecae8120d518f545a7feac01bfba494fd3b3638da705d134b2ae766
          checksum/secret-core: 8e0449563b6b7958e0e5f928850bc8caade5b255fd3772a606d5feb4ae5665bb
          kubectl.kubernetes.io/restartedAt: "2025-06-06T08:59:41+02:00"
        labels:
          app: harbor
          app.kubernetes.io/component: jobservice
          app.kubernetes.io/instance: harbor
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: harbor
          app.kubernetes.io/part-of: harbor
          app.kubernetes.io/version: 2.13.1
          chart: harbor
          component: jobservice
          heritage: Helm
          release: harbor
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                key: secret
                name: harbor-core
          envFrom:
          - configMapRef:
              name: harbor-jobservice-env
          - secretRef:
              name: harbor-jobservice
          image: goharbor/harbor-jobservice:v2.13.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: jobservice
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/jobservice/config.yml
            name: jobservice-config
            subPath: config.yml
          - mountPath: /var/log/jobs
            name: job-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10000
          runAsUser: 10000
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            defaultMode: 420
            name: harbor-jobservice
          name: jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: harbor-jobservice
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-06-06T07:51:35Z"
      lastUpdateTime: "2025-06-06T07:51:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      type: Available
    - lastTransitionTime: "2025-06-06T07:51:35Z"
      lastUpdateTime: "2025-06-06T10:03:46Z"
      message: ReplicaSet "harbor-jobservice-bf84f56c9" has successfully progressed.
      reason: NewReplicaSetAvailable
      type: Progressing
    observedGeneration: 9
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: harbor
      meta.helm.sh/release-namespace: harbor
    labels:
      app: harbor
      app.kubernetes.io/component: portal
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/part-of: harbor
      app.kubernetes.io/version: 2.13.1
      chart: harbor
      component: portal
      heritage: Helm
      release: harbor
    name: harbor-portal
    namespace: harbor
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: harbor
        component: portal
        release: harbor
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/configmap: d3042f1e3001069b3dd069e1ba9c354e48460f998a7732c2e4a53f87e0c732f6
        labels:
          app: harbor
          app.kubernetes.io/component: portal
          app.kubernetes.io/instance: harbor
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: harbor
          app.kubernetes.io/part-of: harbor
          app.kubernetes.io/version: 2.13.1
          chart: harbor
          component: portal
          heritage: Helm
          release: harbor
      spec:
        automountServiceAccountToken: false
        containers:
        - image: goharbor/harbor-portal:v2.13.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: portal
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nginx/nginx.conf
            name: portal-config
            subPath: nginx.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10000
          runAsUser: 10000
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: harbor-portal
          name: portal-config
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-06-06T06:42:47Z"
      lastUpdateTime: "2025-06-06T06:43:15Z"
      message: ReplicaSet "harbor-portal-7f7dd65c47" has successfully progressed.
      reason: NewReplicaSetAvailable
      type: Progressing
    - lastTransitionTime: "2025-06-06T07:42:22Z"
      lastUpdateTime: "2025-06-06T07:42:22Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "10"
      meta.helm.sh/release-name: harbor
      meta.helm.sh/release-namespace: harbor
    labels:
      app: harbor
      app.kubernetes.io/component: registry
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harbor
      app.kubernetes.io/part-of: harbor
      app.kubernetes.io/version: 2.13.1
      chart: harbor
      component: registry
      heritage: Helm
      release: harbor
    name: harbor-registry
    namespace: harbor
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: harbor
        component: registry
        release: harbor
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/configmap: 5a00b91de24a331a9a2c8a51a47f8039fb0f6f69fe134c073b46d53eebd15eb4
          checksum/secret: 4b29b5b0160fc410aeba1667ac88a028736644aa3f4d43326b24f1a606fb1292
          checksum/secret-core: 42ee631deb9d33a00f753e0516b9c69f2bd826d9a36c0d379dcfd5d13f11ae39
          checksum/secret-jobservice: 4a22b52c5ecae8120d518f545a7feac01bfba494fd3b3638da705d134b2ae766
          kubectl.kubernetes.io/restartedAt: "2025-06-06T11:42:33+02:00"
        labels:
          app: harbor
          app.kubernetes.io/component: registry
          app.kubernetes.io/instance: harbor
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: harbor
          app.kubernetes.io/part-of: harbor
          app.kubernetes.io/version: 2.13.1
          chart: harbor
          component: registry
          heritage: Helm
          release: harbor
      spec:
        automountServiceAccountToken: false
        containers:
        - envFrom:
          - secretRef:
              name: harbor-registry
          image: goharbor/registry-photon:v2.13.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: registry
          ports:
          - containerPort: 5000
            protocol: TCP
          - containerPort: 5001
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /storage
            name: registry-data
          - mountPath: /etc/registry/passwd
            name: registry-htpasswd
            subPath: passwd
          - mountPath: /etc/registry/config.yml
            name: registry-config
            subPath: config.yml
        - env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                key: secret
                name: harbor-core
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                key: JOBSERVICE_SECRET
                name: harbor-jobservice
          envFrom:
          - configMapRef:
              name: harbor-registryctl
          - secretRef:
              name: harbor-registry
          - secretRef:
              name: harbor-registryctl
          image: goharbor/harbor-registryctl:v2.13.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: registryctl
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /storage
            name: registry-data
          - mountPath: /etc/registry/config.yml
            name: registry-config
            subPath: config.yml
          - mountPath: /etc/registryctl/config.yml
            name: registry-config
            subPath: ctl-config.yml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10000
          fsGroupChangePolicy: OnRootMismatch
          runAsUser: 10000
        terminationGracePeriodSeconds: 120
        volumes:
        - name: registry-htpasswd
          secret:
            defaultMode: 420
            items:
            - key: REGISTRY_HTPASSWD
              path: passwd
            secretName: harbor-registry-htpasswd
        - configMap:
            defaultMode: 420
            name: harbor-registry
          name: registry-config
        - name: registry-data
          persistentVolumeClaim:
            claimName: harbor-registry
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-06-06T07:42:25Z"
      lastUpdateTime: "2025-06-06T07:42:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      type: Available
    - lastTransitionTime: "2025-06-06T06:42:47Z"
      lastUpdateTime: "2025-06-06T10:03:26Z"
      message: ReplicaSet "harbor-registry-6d6c859f9" has successfully progressed.
      reason: NewReplicaSetAvailable
      type: Progressing
    observedGeneration: 10
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    labels:
      app: postgres
    name: postgres
    namespace: harbor
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: postgres
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: postgres
      spec:
        containers:
        - env:
          - name: POSTGRES_PASSWORD
            value: harbor123
          - name: POSTGRES_USER
            value: harbor
          - name: POSTGRES_DB
            value: harbor
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          name: postgres
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/hostname: raspberrypi01.ramaedge.local
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-06-06T06:59:01Z"
      lastUpdateTime: "2025-06-06T06:59:01Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      type: Available
    - lastTransitionTime: "2025-06-06T06:58:52Z"
      lastUpdateTime: "2025-06-06T06:59:23Z"
      message: ReplicaSet "postgres-76877f9d46" has successfully progressed.
      reason: NewReplicaSetAvailable
      type: Progressing
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    labels:
      app: redis
    name: redis
    namespace: harbor
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: redis
      spec:
        containers:
        - image: redis:7-alpine
          imagePullPolicy: IfNotPresent
          name: redis
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-06-06T06:44:15Z"
      lastUpdateTime: "2025-06-06T06:44:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      type: Available
    - lastTransitionTime: "2025-06-06T06:43:57Z"
      lastUpdateTime: "2025-06-06T06:44:15Z"
      message: ReplicaSet "redis-5fcddcc8b9" has successfully progressed.
      reason: NewReplicaSetAvailable
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
