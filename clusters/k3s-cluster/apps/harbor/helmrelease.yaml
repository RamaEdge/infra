apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: harbor
  namespace: flux-system
spec:
  interval: 5m
  targetNamespace: harbor
  install:
    createNamespace: false
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  chart:
    spec:
      chart: harbor
      version: 1.17.0
      sourceRef:
        kind: HelmRepository
        name: harbor
        namespace: flux-system
  values:
    externalURL: https://harbor.theedgeworks.ai
    imagePullPolicy: IfNotPresent
    
    # Harbor Core Configuration
    # Using octohelm/harbor images from GHCR which support ARM64
    core:
      image:
        repository: ghcr.io/octohelm/harbor/harbor-core
        tag: v2.13.0
      # OIDC configuration environment variables
      extraEnvVars:
        - name: AUTH_MODE
          value: "oidc_auth"
        - name: OIDC_NAME
          value: "Google Workspace"
        - name: OIDC_ENDPOINT
          value: "https://accounts.google.com"
        - name: OIDC_SCOPE
          value: "openid,profile,email"
        - name: OIDC_VERIFY_CERT
          value: "true"
        - name: OIDC_AUTO_ONBOARD
          value: "true"
        - name: OIDC_EXTRA_REDIRECT_PARMS
          value: "scope=openid,profile,email&hd=theedgeworks.ai"
      extraEnvVarsFrom:
        - secretRef:
            name: harbor-google-workspace-oidc
            keys:
              - client-id: OIDC_CLIENT_ID
              - client-secret: OIDC_CLIENT_SECRET
    portal:
      image:
        repository: ghcr.io/octohelm/harbor/harbor-portal
        tag: v2.13.0
    jobservice:
      image:
        repository: ghcr.io/octohelm/harbor/harbor-jobservice
        tag: v2.13.0
    registry:
      registry:
        image:
          repository: registry
          tag: 2.8.2
      controller:
        image:
          repository: ghcr.io/octohelm/harbor/harbor-registryctl
          tag: v2.13.0
    nginx:
      image:
        repository: ghcr.io/octohelm/harbor/harbor-nginx
        tag: v2.13.0

    # External PostgreSQL configuration
    database:
      type: external
      external:
        host: postgres-service.harbor.svc.cluster.local
        port: 5432
        username: admin
        passwordSecretRef:
          name: harbor-db-credentials
          key: password
        coreDatabase: harbor
        sslmode: disable

    # External Redis configuration
    redis:
      type: external
      external:
        addr: redis-service.harbor.svc.cluster.local:6379
        passwordSecretRef:
          name: harbor-redis-credentials
          key: password
      internal:
        enabled: false
      harborRedis:
        enabled: false

    # Persistence configuration
    persistence:
      enabled: true
      persistentVolumeClaim:
        registry:
          size: 10Gi
        jobservice:
          size: 1Gi
        trivy:
          size: 5Gi

    # TLS configuration
    expose:
      type: ingress
      tls:
        enabled: true
        certSource: secret
        secret:
          secretName: harbor-tls
      ingress:
        hosts:
          core: harbor.theedgeworks.ai
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure

    # Google Workspace OIDC Configuration
    # Note: Harbor Helm chart doesn't support OIDC configuration directly
    # OIDC configuration is added to the core section above via environment variables
    # Additional OIDC setup can be done via the harbor-oidc-init.yaml job

    # Trivy vulnerability scanner configuration
    # Using octohelm/trivy-adapter-photon from GHCR which supports ARM64
    trivy:
      enabled: true
      image:
        repository: ghcr.io/octohelm/trivy-adapter-photon
        tag: v2.13.0
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          cpu: 1
          memory: 1Gi
      # Configure Trivy to scan for vulnerabilities
      vulnType: "os,library"
      severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
      ignoreUnfixed: false
      securityCheck: "vuln"
      timeout: 5m0s
      # Use mirror repositories for better reliability
      dbRepository:
        - "mirror.gcr.io/aquasec/trivy-db"
        - "ghcr.io/aquasecurity/trivy-db"
      javaDBRepository:
        - "mirror.gcr.io/aquasec/trivy-java-db"
        - "ghcr.io/aquasecurity/trivy-java-db"

    # Disable components we don't need
    chartmuseum:
      enabled: false
    notary:
      enabled: false

    # Cosign Configuration
    # Harbor 2.13.0 supports Cosign for container image signing and verification
    # Cosign is enabled by default and configured at the project level
    # 
    # To enable Cosign for a project:
    # 1. Log in to Harbor web interface
    # 2. Navigate to your project
    # 3. Go to Configuration > Deployment Security
    # 4. Enable "Cosign" option
    #
    # To sign images with Cosign:
    # 1. Install Cosign CLI: https://github.com/sigstore/cosign
    # 2. Generate key pair: cosign generate-key-pair
    # 3. Sign image: cosign sign --key cosign.key harbor.theedgeworks.ai/project/image:tag
    # 4. Verify signature: cosign verify --key cosign.pub harbor.theedgeworks.ai/project/image:tag
    #
    # Note: Cosign signatures are stored as OCI artifacts alongside the main image